from aiogram import F
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from src.config.cfg import bot
from src.keyboards.inline import return_to_main_kb, menu_kb, MyCallBack
from src.handlers.basic import router

import asyncio
import sqlite3

from src.parser.database import create_table_subscriptions


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–∫–µ–Ω–æ–≤..
@router.callback_query(MyCallBack.filter(F.foo == 'sub_bank' and F.bar == 7))
async def top_up_user(query: CallbackQuery, callback_data: MyCallBack):
    await query.message.edit_text('–ñ–¥–µ–º —Ç–≤–æ–µ–π –æ–ø–ª–∞—Ç—ãüòâ\n', reply_markup=return_to_main_kb)
    await bot.send_invoice(
        chat_id=query.message.chat.id,
        title="–ü–æ–¥–ø–∏—Å–∫–∞",
        description="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 7 –¥–Ω–µ–π",
        payload=f'test-invoice-payload',
        provider_token='381764678:TEST:80119',
        currency='RUB',
        prices=[
            LabeledPrice(
                label='7 –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏',
                amount=599 * 100
            )
        ],
        max_tip_amount=1000 * 1000,
        suggested_tip_amounts=[],
        start_parameter=f'',
        provider_data=None,
        need_email=False,
        need_phone_number=False,
        need_name=False,
        need_shipping_address=False,
        send_phone_number_to_provider=False,
        send_email_to_provider=False,
        is_flexible=False,
        disable_notification=False,
        protect_content=True,
        reply_to_message_id=None,
        allow_sending_without_reply=True,
        reply_markup=None,
        request_timeout=30
    )


@router.callback_query(MyCallBack.filter(F.foo == 'sub_bank' and F.bar == 14))
async def top_up_user(query: CallbackQuery, callback_data: MyCallBack):
    await query.message.edit_text('–ñ–¥–µ–º —Ç–≤–æ–µ–π –æ–ø–ª–∞—Ç—ãüòâ\n', reply_markup=return_to_main_kb)
    await bot.send_invoice(
        chat_id=query.message.chat.id,
        title="–ü–æ–¥–ø–∏—Å–∫–∞",
        description="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 14 –¥–Ω–µ–π",
        payload=f'test-invoice-payload',
        provider_token='381764678:TEST:80119',
        currency='RUB',
        prices=[
            LabeledPrice(
                label='14 –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏',
                amount=999 * 100
            )
        ],
        max_tip_amount=1000 * 1000,
        suggested_tip_amounts=[],
        start_parameter=f'',
        provider_data=None,
        need_email=False,
        need_phone_number=False,
        need_name=False,
        need_shipping_address=False,
        send_phone_number_to_provider=False,
        send_email_to_provider=False,
        is_flexible=False,
        disable_notification=False,
        protect_content=True,
        reply_to_message_id=None,
        allow_sending_without_reply=True,
        reply_markup=None,
        request_timeout=30
    )


@router.callback_query(MyCallBack.filter(F.foo == 'sub_bank' and F.bar == 30))
async def top_up_user(query: CallbackQuery, callback_data: MyCallBack):
    await query.message.edit_text('–ñ–¥–µ–º —Ç–≤–æ–µ–π –æ–ø–ª–∞—Ç—ãüòâ\n', reply_markup=return_to_main_kb)
    await bot.send_invoice(
        chat_id=query.message.chat.id,
        title="–ü–æ–¥–ø–∏—Å–∫–∞",
        description="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π",
        payload=f'test-invoice-payload',
        provider_token='381764678:TEST:80119',
        currency='RUB',
        prices=[
            LabeledPrice(
                label='30 –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏',
                amount=1799 * 100
            )
        ],
        max_tip_amount=10000 * 1000,
        suggested_tip_amounts=[],
        start_parameter=f'',
        provider_data=None,
        need_email=False,
        need_phone_number=False,
        need_name=False,
        need_shipping_address=False,
        send_phone_number_to_provider=False,
        send_email_to_provider=False,
        is_flexible=False,
        disable_notification=False,
        protect_content=True,
        reply_to_message_id=None,
        allow_sending_without_reply=True,
        reply_markup=None,
        request_timeout=30
    )
@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@router.message(F.successful_payment)
async def succesfull_payment(message: Message):
    print("–£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞")
    user_id = message.from_user.id
    price_list = {
        599: 7,
        999: 14,
        1799: 30
    }
    if (message.successful_payment.total_amount // 100) in price_list:
        user_subdays = price_list[message.successful_payment.total_amount // 100]
        print(f'{user_subdays} days')
    else:
        print(f"–ö–ª—é—á {message.successful_payment.total_amount} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ.")
    user_subtime = 24 * user_subdays  # ?? –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ (–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏)
    user_substatus = True  # (–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ (–ø–æ–¥–ø–∏—Å–∞–Ω –∏–ª–∏ –Ω–µ—Ç))
    # –ó–∞–ø–∏—Å–∞–ª–∏ user_id –≤ –±–¥ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
    conn_sub = sqlite3.connect('subscriptions.db')
    # conn = psycopg2.connect(
    #    dbname="subscriptions",
    #    user="postgres",
    #    password="root",
    #    host="localhost",
    #    port="5432"
    # )
    cursor = conn_sub.cursor()
    create_table_subscriptions()
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ user_subtime –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('SELECT user_subtime FROM subscriptions WHERE user_id=?', (user_id,))
    current_subtime = cursor.fetchone()

    if current_subtime is not None:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, –ø—Ä–∏–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫ —Ç–µ–∫—É—â–µ–º—É
        user_subtime += current_subtime[0]

    # –ù–∏–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ 'subscriptions'. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä
    # INSERT OR REPLACE INTO, –∫–æ—Ç–æ—Ä—ã–π –≤—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º user_id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ—Ç
    # —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å. –ó–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (?, ?, ?),
    # –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–º–µ–Ω—è—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö user_id, user_subtime –∏ user_substatus. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
    # –≤—Å—Ç–∞–≤–∫–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    cursor.execute('''
            INSERT OR REPLACE INTO subscriptions (user_id, user_subtime, user_substatus)
            VALUES (?, ?, ?)
        ''', (user_id, user_subtime, user_substatus))
    conn_sub.commit()
    conn_sub.close()

    msg = f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency}!"
    await message.answer(f"{msg}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å", reply_markup=menu_kb)
